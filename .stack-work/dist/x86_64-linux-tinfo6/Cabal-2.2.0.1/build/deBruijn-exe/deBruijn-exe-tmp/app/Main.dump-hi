
==================== FINAL INTERFACE ====================
2019-03-02 10:04:30.694410457 UTC

interface main:Main 8044
  interface hash: 8a0af87143a7691c750fdac50c65ab62
  ABI hash: db13f31158045ca8751ce0b7764ace55
  export-list hash: 79de70ce54ecc746e7fc08cbfd97c432
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 52cdc48939b515716e5e959e004f63c3
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.cleanSequence
  Main.db
  Main.deBruijn
  Main.exit
  Main.main
  Main.parse
  Main.quitFailure
  Main.usage
module dependencies:
package dependencies: base-4.11.1.0* deBruijn-0.1.0.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.IO.Exception acc060dca2e46d8b8275d06ee7d5d60d
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Environment 06420d98d10ee04b8dda9c0d88032c55
import  -/  base-4.11.1.0:System.Exit a7af6f90beaa15182d3a20667d878df0
import  -/  base-4.11.1.0:System.IO 40b9aff18a55c99eb253f9a43ff9b627
import  -/  base-4.11.1.0:Text.Read 6c02630607b565ffcb34e8127673989b
import  -/  deBruijn-0.1.0.0:Lib 11be1f8c378b9cba14e59cf8371e16a7
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
576c7b9a1ef8dceb5a07da8e7ddb3a27
  $wdb :: GHC.Prim.Int# -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0] -}
88138c4505d0c1a341faf1812d75cae5
  $wdeBruijn :: GHC.Prim.Int# -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: GHC.Base.String) ->
                 case GHC.Prim.<=# ww 0# of lwild {
                   DEFAULT
                   -> letrec {
                        go :: [GHC.Types.Int] -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <S,1*U> -}
                        = \ (ds :: [GHC.Types.Int]) ->
                          case ds of wild {
                            [] -> GHC.Types.[] @ GHC.Types.Char
                            : y ys
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.List.!! @ GHC.Types.Char w y)
                                 (go ys) }
                      } in
                      go
                        (Main.cleanSequence
                           (Main.$wdb
                              ww
                              (Lib.$wlistOfN @ GHC.Types.Int ww Main.cleanSequence1)))
                   1# -> GHC.Types.[] @ GHC.Types.Char }) -}
a270c76890d1270493d239e717bcc28b
  cleanSequence :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: [GHC.Types.Int]) ->
                 GHC.List.reverse1
                   @ GHC.Types.Int
                   (Lib.removeSameValues
                      @ GHC.Types.Int
                      GHC.Classes.$fEqInt
                      (GHC.List.reverse1
                         @ GHC.Types.Int
                         xs
                         (GHC.Types.[] @ GHC.Types.Int))
                      Main.cleanSequence1)
                   (GHC.Types.[] @ GHC.Types.Int)) -}
094486ec4cb34229b5665be7d8145f23
  cleanSequence1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8dda7e8e27fe2972b7faa682509fe5a3
  db :: GHC.Types.Int -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: [GHC.Types.Int]) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wdb ww1 w1 }) -}
1e8da12ddf68f2d3ccf02731f5d79e28
  deBruijn :: GHC.Types.Int -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wdeBruijn ww1 w1 }) -}
d5e7ffe1e989f298b8007f26eb1e5d33
  exit :: GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (0, True, True)
                System.Exit.exitSuccess1
                  `cast`
                (forall (a :: <*>_N). Sym (GHC.Types.N:IO[0] <a>_R)) -}
1d204552cd1e75806457f95593903f60
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5fc866327d1ccea486ed5f1e67e000fa
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (Foreign.Marshal.Alloc.allocaBytesAligned
                         @ Foreign.C.Types.CInt
                         @ [GHC.Base.String]
                         Foreign.Storable.$fStorableBool7
                         Foreign.Storable.$fStorableBool7
                         System.Environment.getArgs1
                           `cast`
                         (<GHC.Ptr.Ptr Foreign.C.Types.CInt>_R
                          ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)))
                        `cast`
                      (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (Main.parse @ () ipv1) `cast` (GHC.Types.N:IO[0] <()>_R) ipv }) -}
07c83632ca6f5fa0b7a4306a78a93676
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
4fed0b9059bb2346f4515d0efcb3c94b
  parse :: [[GHC.Types.Char]] -> GHC.Types.IO b
  {- Arity: 1, Strictness: <S,1*U> -}
5f3deed3b349735c751f0b6610de45a2
  quitFailure :: GHC.Types.IO a
  {- Arity: 1, Strictness: <B,U>x,
     Unfolding: InlineRule (0, True, True)
                Main.quitFailure1
                  `cast`
                (forall (a :: <*>_N). Sym (GHC.Types.N:IO[0] <a>_R)) -}
2ddf11b7078e3668acc5ca4057033f5f
  quitFailure1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, a #)
  {- Arity: 1, Strictness: <B,U>x -}
483b60db574acc364c158790c3284a6f
  usage :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.usage1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ba87d8ce8de4588c96d982d5ee2e9bf4
  usage1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.usage12
                        GHC.Types.True
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.usage10
                        GHC.Types.True
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.usage8
                        GHC.Types.True
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.usage6
                        GHC.Types.True
                        ipv4 of ds4 { (#,#) ipv6 ipv7 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        GHC.IO.Handle.FD.stdout
                        Main.usage4
                        GHC.Types.True
                        ipv6 of ds5 { (#,#) ipv8 ipv9 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.usage2
                   GHC.Types.True
                   ipv8 } } } } }) -}
107a223d7f638170e4a55e208cd9b14e
  usage10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage11) -}
d2602cc7d237b709c376aa8b30c3e948
  usage11 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\t--check\t\tcheck if a sequence is a de Bruijn sequence"#) -}
b70a788d9b57991197284515b62cfc04
  usage12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage13) -}
f176b340c650e5d6e8b1c0abfc83b1fd
  usage13 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("USAGE: ./deBruijn n [a] [--check|--unique|--clean]\n"#) -}
212a026c004f1467ceaa6a3b97209a65
  usage2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage3) -}
4c5cd48419c6559b8c8c82be0853f527
  usage3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\ta\t\talphabet [def: \"01\"]"#) -}
ec56a31a0519780c39016bfa253c70a9
  usage4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage5) -}
ba4544541e0516a2bdd6984cb62f5628
  usage5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\tn\t\torder of the sequence"#) -}
7682ab3df4da44e396581096ed14857c
  usage6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage7) -}
8b1698e141bc04565eee4892f11b5325
  usage7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\t--clean\t\tlist cleaning"#) -}
14d260607b2ab2a0bf94d3311344c30d
  usage8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.usage9) -}
e5646b206fd4011283517470acae5e5f
  usage9 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("\t--unique\tcheck if 2 sequences are distinct de Bruijn sequences"#) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

