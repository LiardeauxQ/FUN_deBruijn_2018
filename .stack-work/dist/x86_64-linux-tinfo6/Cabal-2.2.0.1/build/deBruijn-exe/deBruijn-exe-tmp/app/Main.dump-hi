
==================== FINAL INTERFACE ====================
2019-03-01 17:39:11.201329832 UTC

interface main:Main 8043
  interface hash: cbbc9deceab4a0a3ffb04ce262b4a896
  ABI hash: d44b1f35061912429373884f524f6d98
  export-list hash: 5693f12e8e0f96816fec0c7aae8b5403
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 52cdc48939b515716e5e959e004f63c3
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.cleanSequence
  Main.db
  Main.deBruijn
  Main.main
module dependencies:
package dependencies: base-4.11.1.0* deBruijn-0.1.0.0
                      ghc-prim-0.5.2.0 integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Environment 7fdede11f96719870569cb0da1adac2f
import  -/  base-4.11.1.0:System.Exit a7af6f90beaa15182d3a20667d878df0
import  -/  base-4.11.1.0:System.IO 1c239be44126f7b1ba512ea61300f4dc
import  -/  deBruijn-0.1.0.0:Lib 11be1f8c378b9cba14e59cf8371e16a7
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
576c7b9a1ef8dceb5a07da8e7ddb3a27
  $wdb :: GHC.Prim.Int# -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0] -}
95ffdb43d27a09877a9b2b5d784841b1
  $wdeBruijn :: GHC.Prim.Int# -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: GHC.Base.String) ->
                 letrec {
                   go :: [GHC.Types.Int] -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Types.Int]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ GHC.Types.Char
                       : y ys
                       -> GHC.Types.:
                            @ GHC.Types.Char
                            (GHC.List.!! @ GHC.Types.Char w y)
                            (go ys) }
                 } in
                 go
                   (Main.cleanSequence
                      (Main.$wdb
                         ww
                         (Lib.$wlistOfN @ GHC.Types.Int ww Main.cleanSequence1)))) -}
a270c76890d1270493d239e717bcc28b
  cleanSequence :: [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: [GHC.Types.Int]) ->
                 GHC.List.reverse1
                   @ GHC.Types.Int
                   (Lib.removeSameValues
                      @ GHC.Types.Int
                      GHC.Classes.$fEqInt
                      (GHC.List.reverse1
                         @ GHC.Types.Int
                         xs
                         (GHC.Types.[] @ GHC.Types.Int))
                      Main.cleanSequence1)
                   (GHC.Types.[] @ GHC.Types.Int)) -}
094486ec4cb34229b5665be7d8145f23
  cleanSequence1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
8dda7e8e27fe2972b7faa682509fe5a3
  db :: GHC.Types.Int -> [GHC.Types.Int] -> [GHC.Types.Int]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: [GHC.Types.Int]) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wdb ww1 w1 }) -}
2488351ed7d5d91a3c16ff3d5fb6eea8
  deBruijn :: GHC.Types.Int -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wdeBruijn ww1 w1 }) -}
36c264b2f7057d84531c06a163a68de7
  main :: GHC.Types.IO ()
  {- Arity: 1,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
5f7637a557242b0d9ca49b4a93352fe5
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   Main.main2
                   GHC.Types.True) -}
22f8af63b30be413a9be9a7f8f08344c
  main2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main3) -}
2c70a107f29e228ce6848c4350b1a8a8
  main3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("test"#) -}
ac817d9921024851efedcaf4e01ae73f
  main4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

