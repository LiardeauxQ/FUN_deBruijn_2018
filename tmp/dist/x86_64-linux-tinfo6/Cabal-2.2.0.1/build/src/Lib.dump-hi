
==================== FINAL INTERFACE ====================
2019-03-01 17:26:59.629463046 UTC

interface deBruijn-0.1.0.0-3y7lalbVcR6Jq5mG6ZfyWc:Lib 8043
  interface hash: 59879e652c0843425bfa588f8b87c9c0
  ABI hash: 11be1f8c378b9cba14e59cf8371e16a7
  export-list hash: 5f2571521490397a48fe3723b7794a49
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: c95faa93f756e0e2e33ff3c4d8e33e20
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Lib.listOfN
  Lib.removeSameValues
  Lib.replace
  Lib.slice
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
e69d635f338a809487a71563eac5c1ea
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Lib.$trModule3 Lib.$trModule1) -}
c4ce18445f7808a23caa6fbd7b9edadf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule2) -}
55618dbd9fd1f1b087835472238ca55e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Lib"#) -}
acce90cefa2a826bc3e8cf05087a2a3f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Lib.$trModule4) -}
57fc513b68fdfa02f4a7d9600dffbb06
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("deBruijn-0.1.0.0-3y7lalbVcR6Jq5mG6ZfyWc"#) -}
d070a90f5853d1a02a99edb935ede0f5
  $wlistOfN :: GHC.Prim.Int# -> a -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,U>, Inline: [0],
     Unfolding: (\ @ a (ww :: GHC.Prim.Int#) (w :: a) ->
                 case GHC.Prim.<# 0# ww of lwild {
                   DEFAULT -> GHC.Types.[] @ a
                   1#
                   -> let {
                        lvl2 :: [a] = GHC.Types.: @ a w (GHC.Types.[] @ a)
                      } in
                      letrec {
                        $wxs :: GHC.Prim.Int# -> [a]
                          {- Arity: 1, Strictness: <S,1*U>, Inline: [0] -}
                        = \ (ww1 :: GHC.Prim.Int#) ->
                          case ww1 of ds1 {
                            DEFAULT -> GHC.Types.: @ a w ($wxs (GHC.Prim.-# ds1 1#))
                            1# -> lvl2 }
                      } in
                      $wxs ww }) -}
57d2bd4a6ad48d65b81eaaafe442233c
  $wslice :: GHC.Prim.Int# -> GHC.Types.Int -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,1*U(U)><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.Int#)
                   (w :: GHC.Types.Int)
                   (w1 :: [a]) ->
                 case GHC.Prim.<# ww 0# of lwild {
                   DEFAULT
                   -> case w of wild { GHC.Types.I# x ->
                      case GHC.Prim.<# x 0# of lwild1 {
                        DEFAULT
                        -> let {
                             n :: GHC.Prim.Int# = GHC.Prim.-# (GHC.Prim.+# x 1#) ww
                           } in
                           case GHC.Prim.<# 0# n of lwild2 {
                             DEFAULT -> GHC.Types.[] @ a
                             1#
                             -> case GHC.Prim.<=# ww 0# of lwild3 {
                                  DEFAULT
                                  -> GHC.List.$wunsafeTake @ a n (Lib.$wunsafeDrop @ a ww w1)
                                  1# -> GHC.List.$wunsafeTake @ a n w1 } }
                        1# -> GHC.Types.[] @ a } }
                   1# -> GHC.Types.[] @ a }) -}
e5148ebe04942235a4db07c4efc23d91
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
96b0566ce232e1025ac52c80f5b046da
  listOfN :: GHC.Types.Int -> a -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: a) ->
                 case w of ww { GHC.Types.I# ww1 -> Lib.$wlistOfN @ a ww1 w1 }) -}
2eb26fefb7e472c3086913c9963db064
  removeSameValues :: GHC.Classes.Eq a => [a] -> a -> [a]
  {- Arity: 3, Strictness: <S(C(C(S))L),U(C(C1(U)),A)><S,1*U><L,U> -}
19f6be32edc82a77e508e863a6a954ce
  replace :: GHC.Types.Int -> a -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U><S,1*U> -}
ebf5353bdd056043bb661f48c13cabe0
  slice :: GHC.Types.Int -> GHC.Types.Int -> [a] -> [a]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,1*U(U)><L,1*U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) (w2 :: [a]) ->
                 case w of ww { GHC.Types.I# ww1 -> Lib.$wslice @ a ww1 w1 w2 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

